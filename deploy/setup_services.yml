---
- hosts: tiuraniemi.io
  become: true
  become_user: root
  tasks:
      - name: Create output directory
        ansible.builtin.file:
            path: '{{ playbook_dir }}/.output'
            state: directory
        become: false
        register: local_dir
        delegate_to: localhost

      # CLOUDFLARE DDNS
      - name: Download Cloudflare DDNS
        local_action: 'get_url url="https://github.com/timothymiller/cloudflare-ddns/archive/{{ cloudflare_ddns_commit }}.tar.gz" dest="{{ playbook_dir }}/.output/cloudflare-ddns-{{ cloudflare_ddns_commit }}.tar.gz" checksum="sha256:{{ cloudflare_ddns_checksum }}"'
        become: false
      - name: Copy Cloudflare DDNS 
        ansible.builtin.copy:
            src: '{{ playbook_dir }}/.output/cloudflare-ddns-{{ cloudflare_ddns_commit }}.tar.gz'
            dest: '/opt/cloudflare-ddns-{{ cloudflare_ddns_commit }}.tar.gz'
            owner: root
            group: root
            mode: '0644'
        register: cloudflare_ddns
      - name: Unpack Cloudflare DDNS 
        ansible.builtin.unarchive:
            src: '/opt/cloudflare-ddns-{{ cloudflare_ddns_commit }}.tar.gz'
            dest: '/opt'
            remote_src: yes
        when: cloudflare_ddns.changed
      - name: Install Cloudflare DDNS Python requirements in virtualenv
        pip:
            requirements: '/opt/cloudflare-ddns-{{ cloudflare_ddns_commit }}/requirements.txt'
            virtualenv: '/opt/cloudflare-ddns-{{ cloudflare_ddns_commit }}/venv'
        when: cloudflare_ddns.changed
      - name: Copy Cloudflare DDNS config file
        ansible.builtin.template:
            src: '{{ playbook_dir }}/services/cloudflare-ddns.json.j2'
            dest: '/opt/cloudflare-ddns-{{ cloudflare_ddns_commit }}/config.json'
            owner: root
            group: root
            mode: '0644'
        register: cloudflare_ddns_config
      - name: Copy Cloudflare DDNS service file
        ansible.builtin.template:
            src: '{{ playbook_dir }}/services/cloudflare-ddns.service.j2'
            dest: '/etc/systemd/system/cloudflare-ddns.service'
            owner: root
            group: root
            mode: '0644'
        register: cloudflare_ddns_service
      - name: Copy Cloudflare DDNS timer file
        ansible.builtin.template:
            src: '{{ playbook_dir }}/services/cloudflare-ddns.timer.j2'
            dest: '/etc/systemd/system/cloudflare-ddns.timer'
            owner: root
            group: root
            mode: '0644'
        register: cloudflare_ddns_timer
      - name: Make sure Cloudflare DDNS timer is running
        ansible.builtin.systemd:
          state: started
          name: cloudflare-ddns.timer
        when: cloudflare_ddns_timer.changed
      - name: Enable Cloudflare DDNS timer
        ansible.builtin.systemd:
          name: cloudflare-ddns.timer
          enabled: yes
        when: cloudflare_ddns_timer.changed
      - name: Restart Cloudflare DDNS timer when configs change, and also issue daemon-reload to pick up config changes
        ansible.builtin.systemd:
          state: restarted
          daemon_reload: yes
          name: cloudflare-ddns.timer
        when: cloudflare_ddns.changed or cloudflare_ddns_service.changed

      # EXTENDEDMIND HUB
      - name: Download extendedmind_hub
        local_action: 'get_url url="https://github.com/extendedmind/extendedmind/releases/download/{{ extendedmind_hub_version }}/extendedmind_hub" dest="{{ playbook_dir }}/.output/extendedmind_hub-{{ extendedmind_hub_version }}" checksum="sha256:{{ extendedmind_hub_checksum }}"'
        become: false
      - name: Copy extendedmind_hub
        ansible.builtin.copy:
            src: '{{ playbook_dir }}/.output/extendedmind_hub-{{ extendedmind_hub_version }}'
            dest: '/opt/extendedmind_hub-{{ extendedmind_hub_version }}'
            owner: root
            group: root
            mode: '0744'
        register: extendedmind_hub
      - name: Create symbolic link for extendedmind_hub
        file:
            src: '/opt/extendedmind_hub-{{ extendedmind_hub_version }}'
            dest: '/opt/extendedmind_hub'
            owner: root
            group: root
            state: link
        when: extendedmind_hub.changed
      - name: Copy extendedmind_hub service file
        ansible.builtin.template:
            src: '{{ playbook_dir }}/services/extendedmind_hub.service.j2'
            dest: '/etc/systemd/system/extendedmind_hub.service'
            owner: root
            group: root
            mode: '0644'
        register: extendedmind_hub_service
      - name: Enable extendedmind_hub
        ansible.builtin.systemd:
          name: extendedmind_hub
          enabled: yes
        when: extendedmind_hub_service.changed
      - name: Restart extendedmind_hub
        ansible.builtin.command: systemctl restart extendedmind_hub.service
        when: extendedmind_hub.changed or extendedmind_hub_service.changed

      # AGATE GEMINI SERVER
      - name: Download Agate
        local_action: 'get_url url="https://github.com/mbrubeck/agate/releases/download/{{ agate_version }}/agate.aarch64-unknown-linux-gnu.gz" dest="{{ playbook_dir }}/.output/agate-{{ agate_version }}.gz" checksum="sha256:{{ agate_checksum }}"'
        become: false
      - name: Copy Agate
        ansible.builtin.copy:
            src: '{{ playbook_dir }}/.output/agate-{{ agate_version }}.gz'
            dest: '/opt/agate-{{ agate_version }}.gz'
            owner: root
            group: root
            mode: '0644'
        register: agate
      - name: Unpack Agate
        command: 'gunzip -k /opt/agate-{{ agate_version }}.gz'
        when: agate.changed
      - name: Set Agate executable
        ansible.builtin.file:
          path: /opt/agate-{{ agate_version }}
          mode: '0744'
        when: agate.changed
      - name: Copy Agate service file
        ansible.builtin.template:
            src: '{{ playbook_dir }}/services/agate.service.j2'
            dest: '/etc/systemd/system/agate.service'
            owner: root
            group: root
            mode: '0644'
        register: agate_service
      - name: Make sure Agate is running
        ansible.builtin.systemd:
          state: started
          name: agate
        when: agate_service.changed
      - name: Enable Agate
        ansible.builtin.systemd:
          name: agate
          enabled: yes
        when: agate_service.changed
      - name: Restart Agate when configs change
        ansible.builtin.command: systemctl restart agate.service
        when: agate.changed or agate_service.changed
